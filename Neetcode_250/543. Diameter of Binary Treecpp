#include <algorithm>
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int nodeDepth(int& diameter, TreeNode* root) {
       if (!root) {
            return 0;
       }
       int depth_left = nodeDepth(diameter, root->left);
       int depth_right = nodeDepth(diameter, root->right);
       if ((depth_left + depth_right) > diameter) {
            diameter = depth_left + depth_right;
       }
       return 1 + max(depth_left, depth_right);
    }

    int diameterOfBinaryTree(TreeNode* root) {
        int diameter = 0;
        nodeDepth(diameter, root);
        return diameter;
    }
};